#!/usr/bin/env node

const fs = require('fs');
const Kernel = require('./../src/NoGame/Engine/Kernel');
const Loader = require('./../src/NoGame/Engine/Loader');
const Server = require('./../src/NoGame/Server/Server');
const Pool = require('pg').Pool;
const PgsqlAccounts = require('./../src/NoGame/Infrastructure/PG/PgsqlAccounts');
const PgsqlCharacters = require('./../src/NoGame/Infrastructure/PG/PgsqlCharacters');
const Protocol = require('./../src/NoGame/Server/Protocol');
const Broadcaster = require('./../src/NoGame/Server/Broadcaster');
const IncomeQueue = require('./../src/NoGame/Server/MessageQueue/IncomeQueue');
const Clock = require('./../src/NoGame/Engine/Clock');
const GameLoop = require('./../src/NoGame/Server/GameLoop');
const BunyanLogger = require('./../src/NoGame/Infrastructure/Logger/BunyanLogger');
const NodeRandomizer = require('./../src/NoGame/Infrastructure/Node/NodeRandomizer');

let parametersFilePath = __dirname + '/../config/parameters.json';

let config = JSON.parse(fs.readFileSync(parametersFilePath));

let clock = new Clock();
let logger = new BunyanLogger('server', config.logLevel);

let broadcaster = new Broadcaster();
let incomeQueue = new IncomeQueue();
const pool = new Pool({
    user: 'nogame',
    password: 'nogame',
    host: 'localhost',
    database: 'nogame',
    max: 10,
    idleTimeoutMillis: 1000
});
let accounts = new PgsqlAccounts(pool);
let characters = new PgsqlCharacters(pool, logger);

let kernel = new Kernel(
    characters,
    Loader.loadMapArea(logger, "Tesaria", __dirname + '/../config/map/tesaria.json', clock),
    Loader.loadMonsterFactory(logger),
    clock,
    new NodeRandomizer(),
    logger
);
kernel.boot();


let protocol = new Protocol(kernel, accounts, characters, incomeQueue, broadcaster, logger);
let server = new Server(kernel, protocol, logger, new GameLoop(), broadcaster, incomeQueue);
server.listen(config.port);


function exitHandler(err) {
    if (err) {
        logger.error(err.message);
        logger.error(err.stack);
    }

    // prevent terminating server more than one time
    if (!server.isTerminated) {
        server.terminate(() => {
            process.exit();
        });
    }
}

//catches ctrl+c event
process.on('SIGINT', exitHandler.bind(null));

//catches uncaught exceptions
process.on('uncaughtException', exitHandler.bind(null));